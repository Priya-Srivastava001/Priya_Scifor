{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyN9fmVXtxhi+9f3L3n51UyE",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Priya-Srivastava001/Priya_Scifor/blob/main/Python-Basics/Weekly-Assignments/Basic-Implementation\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 1. Merge Strings Alternately:\n",
        "You are given two strings word1 and word2. Merge the strings by adding letters in alternating order, starting with word1. If a string is longer than the other, append the additional letters onto the end of the merged string."
      ],
      "metadata": {
        "id": "povc1uBHCaat"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def mergeAlt(wrd1, wrd2):\n",
        "  merged=[]\n",
        "  len1, len2= len(wrd1), len(wrd2)\n",
        "  i=0\n",
        "  while i<len1 or i<len2:\n",
        "    if i<len1:\n",
        "      merged.append(wrd1[i])\n",
        "      if i<len2:\n",
        "        merged.append(wrd2[i])\n",
        "        i+=1\n",
        "  return ''.join(merged)"
      ],
      "metadata": {
        "id": "d38VfRYhCky4"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Test Case\n",
        "wrd1 = \"abc\"\n",
        "wrd2 = \"123\"\n",
        "print(mergeAlt(wrd1, wrd2))\n",
        "\n",
        "wrd3 = \"pqr\"\n",
        "wrd4 = \"stu\"\n",
        "print(mergeAlt(wrd3, wrd4))"
      ],
      "metadata": {
        "id": "UEMTI7hND_Kt",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "44f66103-3b93-4922-9cf6-43d0d4129824"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "a1b2c3\n",
            "psqtru\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 2. Find the Difference:\n",
        "You are given two strings s and t.\n",
        "\n",
        "String t is generated by random shuffling string s and then add one more letter at a random position.\n",
        "\n",
        "Return the letter that was added to t."
      ],
      "metadata": {
        "id": "sM7vBHmiFm2J"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def fndDiff(s, t):\n",
        "    from collections import Counter\n",
        "\n",
        "    # Counting the characters in both strings\n",
        "    cnt_s = Counter(s)\n",
        "    cnt_t = Counter(t)\n",
        "\n",
        "    # Finding the character with an extra count in t\n",
        "    for char in cnt_t:\n",
        "        if cnt_t[char] != cnt_s.get(char, 0):\n",
        "            return char\n",
        "\n"
      ],
      "metadata": {
        "id": "7m4r89XGGNAM"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Test cases\n",
        "print(fndDiff(\"abcd\", \"abcde\"))\n",
        "print(fndDiff(\"\", \"y\"))"
      ],
      "metadata": {
        "id": "6F3cvJq0GOQd",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "9dd6ee44-aaca-488c-fa85-a5fc76ca94f1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "e\n",
            "y\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 3. Find the Index of the First Occurrence in a String:\n",
        "Given two strings needle and haystack, return the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack."
      ],
      "metadata": {
        "id": "9rN6t_YsGOoj"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def strStr(haystack, needle):\n",
        "    return haystack.find(needle)"
      ],
      "metadata": {
        "id": "f0jTJOUsGmnv"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Test Case 1\n",
        "print(strStr(\"sadbutsad\", \"sad\"))\n",
        "\n",
        "# Test Case 2\n",
        "print(strStr(\"leetcode\", \"leeto\"))\n",
        "\n",
        "# Test Case 3\n",
        "print(strStr(\"hello\", \"ll\"))\n"
      ],
      "metadata": {
        "id": "DQErcb1vGnaw",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "db8b0b14-da27-430b-eb93-bf93ad6f2a8b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0\n",
            "-1\n",
            "2\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 4. Valid Anagram:\n",
        "Given two strings s and t, return true if t is an anagram of s, and false otherwise.\n",
        "\n",
        "An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once."
      ],
      "metadata": {
        "id": "twlEEFwUGoIN"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from collections import Counter\n",
        "\n",
        "def isAnagram(s, t):\n",
        "    # Comparing the counts of characters in both strings\n",
        "    return Counter(s) == Counter(t)"
      ],
      "metadata": {
        "id": "xf0IjsRTG_9G"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Test Case 1\n",
        "print(isAnagram(\"anagram\", \"nagaram\"))\n",
        "\n",
        "# Test Case 2\n",
        "print(isAnagram(\"rat\", \"car\"))\n",
        "\n",
        "# Additional Test Cases\n",
        "print(isAnagram(\"listen\", \"silent\"))"
      ],
      "metadata": {
        "id": "CMzPuK2FHAAm",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "a269e94a-b885-4a13-fb06-36641c8b769d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "True\n",
            "False\n",
            "True\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 5. Repeated Substring Pattern:\n",
        "Given a string s, check if it can be constructed by taking a substring of it and appending multiple copies of the substring together."
      ],
      "metadata": {
        "id": "AtOHo9pCHANd"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def repeatedPattern(s):\n",
        "    if not s:\n",
        "        return False\n",
        "    ss = (s + s)[1:-1]\n",
        "    return s in ss"
      ],
      "metadata": {
        "id": "G1RiQgP6HOY_"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Test Case 1\n",
        "print(repeatedPattern(\"abab\"))\n",
        "\n",
        "# Test Case 2\n",
        "print(repeatedPattern(\"aba\"))\n",
        "\n",
        "# Test Case 3\n",
        "print(repeatedPattern(\"abcabcabcabc\"))\n"
      ],
      "metadata": {
        "id": "g0ycUOA9HOci",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "a11ffaa3-3e06-4925-d08c-f75b394474f7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "True\n",
            "False\n",
            "True\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 6. Move Zeroes:\n",
        "Given an integer array nums, move all 0's to the end of it while maintaining the relative order of the non-zero elements.\n",
        "\n",
        "Note that you must do this in-place without making a copy of the array."
      ],
      "metadata": {
        "id": "lX5jA-LCHO0K"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def moveZeros(nums):\n",
        "    # Pointer for the position of the next non-zero element\n",
        "    last_non_zero_found_at = 0\n",
        "\n",
        "    # Moving all non-zero elements to the beginning of the array\n",
        "    for i in range(len(nums)):\n",
        "        if nums[i] != 0:\n",
        "            nums[last_non_zero_found_at] = nums[i]\n",
        "            last_non_zero_found_at += 1\n",
        "\n",
        "    # Filling the remaining positions with zeros\n",
        "    for i in range(last_non_zero_found_at, len(nums)):\n",
        "        nums[i] = 0"
      ],
      "metadata": {
        "id": "8NPweyEsJ-Od"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Test Case 1\n",
        "nums1 = [0, 1, 0, 3, 12]\n",
        "moveZeros(nums1)\n",
        "print(nums1)\n",
        "\n",
        "# Test Case 2\n",
        "nums2 = [0]\n",
        "moveZeros(nums2)\n",
        "print(nums2)\n"
      ],
      "metadata": {
        "id": "03IasmtBJ-S7",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "e3f572c0-b6d7-45bc-a039-cdca58e75c62"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1, 3, 12, 0, 0]\n",
            "[0]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 7. Plus One:\n",
        "You are given a large integer represented as an integer array digits, where each digits[i] is the ith digit of the integer. The digits are ordered from most significant to least significant in left-to-right order. The large integer does not contain any leading 0's.\n",
        "\n",
        "Increment the large integer by one and return the resulting array of digits."
      ],
      "metadata": {
        "id": "t3DCEq3mJ-q5"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def plusOne(digits):\n",
        "    n = len(digits)\n",
        "\n",
        "    # Starting from the end of the array\n",
        "    for i in range(n - 1, -1, -1):\n",
        "        if digits[i] < 9:\n",
        "            digits[i] += 1\n",
        "            return digits\n",
        "        digits[i] = 0\n",
        "\n",
        "    # If we have exited the loop, it means we had a carry that went past the most significant digit\n",
        "    return [1] + digits"
      ],
      "metadata": {
        "id": "yd3SfDMxP6Ni"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Test Case 1\n",
        "digits1 = [1, 2, 3]\n",
        "print(plusOne(digits1))\n",
        "\n",
        "# Test Case 2\n",
        "digits2 = [4, 3, 2, 1]\n",
        "print(plusOne(digits2))\n",
        "\n",
        "# Test Case 3\n",
        "digits3 = [9]\n",
        "print(plusOne(digits3))\n"
      ],
      "metadata": {
        "id": "XxvMsiHLP6ZI",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "c9f10fd5-43dc-4f09-865c-b4a06509bae9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1, 2, 4]\n",
            "[4, 3, 2, 2]\n",
            "[1, 0]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 8. Sign of the Product of an Array:\n",
        "There is a function signFunc(x) that returns:\n",
        "\n",
        "1 if x is positive.\n",
        "-1 if x is negative.\n",
        "0 if x is equal to 0.\n",
        "You are given an integer array nums. Let product be the product of all values in the array nums.\n",
        "\n",
        "Return signFunc(product)."
      ],
      "metadata": {
        "id": "qc-_t25HKOvA"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def arraySign(nums):\n",
        "    product_sign = 1  # Started with a positive sign\n",
        "\n",
        "    for num in nums:\n",
        "        if num == 0:\n",
        "            return 0  # If there's a zero in the array, the product is zero\n",
        "        elif num < 0:\n",
        "            product_sign *= -1  # Flipping the sign for each negative number\n",
        "\n",
        "    return product_sign"
      ],
      "metadata": {
        "id": "TC2CxpUCKevx"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Test Case 1\n",
        "nums1 = [-1, -2, -3, -4, 3, 2, 1]\n",
        "print(arraySign(nums1))\n",
        "\n",
        "# Test Case 2\n",
        "nums2 = [1, 5, 0, 2, -3]\n",
        "print(arraySign(nums2))\n",
        "\n",
        "# Test Case 3\n",
        "nums3 = [-1, 1, -1, 1, -1]\n",
        "print(arraySign(nums3))"
      ],
      "metadata": {
        "id": "3YkyRVSyL1Q9",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "f84694e5-fda4-48a6-ec68-f0daacf995e6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1\n",
            "0\n",
            "-1\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 9. Can Make Arithmetic Progression From Sequence:\n",
        "A sequence of numbers is called an arithmetic progression if the difference between any two consecutive elements is the same.\n",
        "\n",
        "Given an array of numbers arr, return true if the array can be rearranged to form an arithmetic progression. Otherwise, return false."
      ],
      "metadata": {
        "id": "WpaGKiPiKfYW"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def AP(arr):\n",
        "    arr.sort()\n",
        "    diff = arr[1] - arr[0]  # Calculating the difference between first two elements\n",
        "\n",
        "    for i in range(2, len(arr)):\n",
        "        if arr[i] - arr[i-1] != diff:\n",
        "            return False\n",
        "\n",
        "    return True"
      ],
      "metadata": {
        "id": "WgXNaDSBK5ZS"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Test Case 1\n",
        "arr1 = [3, 5, 1]\n",
        "print(AP(arr1))\n",
        "\n",
        "# Test Case 2\n",
        "arr2 = [1, 2, 4]\n",
        "print(AP(arr2))\n",
        "\n",
        "# Test Case3\n",
        "arr3 = [5, 10, 15, 20]\n",
        "print(AP(arr3))\n"
      ],
      "metadata": {
        "id": "3YhP4FFEK5db",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "1a774871-9be2-4ae9-a426-4fb8a0db46ad"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "True\n",
            "False\n",
            "True\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 10.  Monotonic Array:\n",
        "An array is monotonic if it is either monotone increasing or monotone decreasing.\n",
        "\n",
        "An array nums is monotone increasing if for all i <= j, nums[i] <= nums[j]. An array nums is monotone decreasing if for all i <= j, nums[i] >= nums[j].\n",
        "\n",
        "Given an integer array nums, return true if the given array is monotonic, or false otherwise."
      ],
      "metadata": {
        "id": "6SbVgf2BK5zq"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def isMonotonic(nums):\n",
        "    increasing = decreasing = True\n",
        "\n",
        "    for i in range(1, len(nums)):\n",
        "        if nums[i] > nums[i-1]:\n",
        "            decreasing = False\n",
        "        elif nums[i] < nums[i-1]:\n",
        "            increasing = False\n",
        "\n",
        "    return increasing or decreasing"
      ],
      "metadata": {
        "id": "7JtxkbE0MGzu"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Test Case 1\n",
        "nums1 = [1, 2, 2, 3]\n",
        "print(isMonotonic(nums1))\n",
        "\n",
        "# Test Case 2\n",
        "nums2 = [6, 5, 4, 4]\n",
        "print(isMonotonic(nums2))\n",
        "\n",
        "# Test Case 3\n",
        "nums3 = [1, 3, 2]\n",
        "print(isMonotonic(nums3))"
      ],
      "metadata": {
        "id": "JSEUzqfzMG5g",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "1d4ba93b-6f37-46b2-9b5a-158c4f5e9939"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "True\n",
            "True\n",
            "False\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 11. Roman to Integer:\n",
        "Symbol       Value\n",
        "I             1\n",
        "V             5\n",
        "X             10\n",
        "L             50\n",
        "C             100\n",
        "D             500\n",
        "M             1000\n",
        "\n",
        "Given a roman numeral, convert it to an integer."
      ],
      "metadata": {
        "id": "MSN9MK4TMNUI"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def romanToInt(s):\n",
        "    roman_values = {\n",
        "        'I': 1,\n",
        "        'V': 5,\n",
        "        'X': 10,\n",
        "        'L': 50,\n",
        "        'C': 100,\n",
        "        'D': 500,\n",
        "        'M': 1000\n",
        "    }\n",
        "\n",
        "    total = 0\n",
        "\n",
        "    for i in range(len(s)):\n",
        "        if i < len(s) - 1 and roman_values[s[i]] < roman_values[s[i+1]]:\n",
        "            total -= roman_values[s[i]]\n",
        "        else:\n",
        "            total += roman_values[s[i]]\n",
        "\n",
        "    return total"
      ],
      "metadata": {
        "id": "wJ0gME8wP7xJ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Test Case 1\n",
        "s1 = \"III\"\n",
        "print(romanToInt(s1))\n",
        "\n",
        "# Test Case 2\n",
        "s2 = \"LVIII\"\n",
        "print(romanToInt(s2))\n",
        "\n",
        "# Test Case 3\n",
        "s3 = \"MCMXCIV\"\n",
        "print(romanToInt(s3))"
      ],
      "metadata": {
        "id": "Zem1KhkKP75F",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "dbf4d6be-2cbf-418b-eb32-87925d583b93"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "3\n",
            "58\n",
            "1994\n"
          ]
        }
      ]
    }
  ]
}